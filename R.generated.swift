//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `FromClubs`.
    static let fromClubs = _R.storyboard.fromClubs()
    /// Storyboard `FromShop`.
    static let fromShop = _R.storyboard.fromShop()
    /// Storyboard `FromSideMenu`.
    static let fromSideMenu = _R.storyboard.fromSideMenu()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `InitialTests`.
    static let initialTests = _R.storyboard.initialTests()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `PlayGame`.
    static let playGame = _R.storyboard.playGame()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FromClubs", bundle: ...)`
    static func fromClubs(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fromClubs)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FromShop", bundle: ...)`
    static func fromShop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fromShop)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FromSideMenu", bundle: ...)`
    static func fromSideMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fromSideMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "InitialTests", bundle: ...)`
    static func initialTests(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.initialTests)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PlayGame", bundle: ...)`
    static func playGame(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.playGame)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `LightYellowColor`.
    static let lightYellowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightYellowColor")
    /// Color `MainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainColor")
    /// Color `PinkishColor`.
    static let pinkishColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PinkishColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightYellowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightYellowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightYellowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PinkishColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pinkishColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pinkishColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightYellowColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightYellowColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightYellowColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PinkishColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pinkishColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pinkishColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Poppins-Bold.otf`.
    static let poppinsBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "otf")
    /// Resource file `Poppins-ExtraBold.otf`.
    static let poppinsExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "otf")
    /// Resource file `Poppins-Light.otf`.
    static let poppinsLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "otf")
    /// Resource file `Poppins-Medium.otf`.
    static let poppinsMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "otf")
    /// Resource file `Poppins-Regular.otf`.
    static let poppinsRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "otf")
    /// Resource file `Poppins-SemiBold.otf`.
    static let poppinsSemiBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "otf")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `Welcome.json`.
    static let welcomeJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Welcome", pathExtension: "json")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "otf")`
    static func poppinsBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "otf")`
    static func poppinsExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Light", withExtension: "otf")`
    static func poppinsLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "otf")`
    static func poppinsMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "otf")`
    static func poppinsRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "otf")`
    static func poppinsSemiBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Welcome", withExtension: "json")`
    static func welcomeJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.welcomeJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }

    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 47 images.
  struct image {
    /// Image `DummyUser`.
    static let dummyUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "DummyUser")
    /// Image `Globe`.
    static let globe = Rswift.ImageResource(bundle: R.hostingBundle, name: "Globe")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `PasswordSuccess`.
    static let passwordSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "PasswordSuccess")
    /// Image `SoundIcon`.
    static let soundIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SoundIcon")
    /// Image `Terms`.
    static let terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "Terms")
    /// Image `apple-logo`.
    static let appleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-logo")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `attachmentIcon`.
    static let attachmentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachmentIcon")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `city`.
    static let city = Rswift.ImageResource(bundle: R.hostingBundle, name: "city")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `clubs`.
    static let clubs = Rswift.ImageResource(bundle: R.hostingBundle, name: "clubs")
    /// Image `coinDaimondIcon`.
    static let coinDaimondIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "coinDaimondIcon")
    /// Image `diamondImage`.
    static let diamondImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamondImage")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `emojiIcon`.
    static let emojiIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "emojiIcon")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `fill_line`.
    static let fill_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "fill_line")
    /// Image `fireIcon`.
    static let fireIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fireIcon")
    /// Image `group`.
    static let group = Rswift.ImageResource(bundle: R.hostingBundle, name: "group")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `languageDummy`.
    static let languageDummy = Rswift.ImageResource(bundle: R.hostingBundle, name: "languageDummy")
    /// Image `light-bolt`.
    static let lightBolt = Rswift.ImageResource(bundle: R.hostingBundle, name: "light-bolt")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `medal`.
    static let medal = Rswift.ImageResource(bundle: R.hostingBundle, name: "medal")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `mic`.
    static let mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `play-button`.
    static let playButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-button")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `plusIcon`.
    static let plusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusIcon")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `review`.
    static let review = Rswift.ImageResource(bundle: R.hostingBundle, name: "review")
    /// Image `rewardImage`.
    static let rewardImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewardImage")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `shareIcon`.
    static let shareIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareIcon")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `shop`.
    static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `tokenImagae`.
    static let tokenImagae = Rswift.ImageResource(bundle: R.hostingBundle, name: "tokenImagae")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DummyUser", bundle: ..., traitCollection: ...)`
    static func dummyUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Globe", bundle: ..., traitCollection: ...)`
    static func globe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.globe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PasswordSuccess", bundle: ..., traitCollection: ...)`
    static func passwordSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SoundIcon", bundle: ..., traitCollection: ...)`
    static func soundIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soundIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Terms", bundle: ..., traitCollection: ...)`
    static func terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple-logo", bundle: ..., traitCollection: ...)`
    static func appleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attachmentIcon", bundle: ..., traitCollection: ...)`
    static func attachmentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachmentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "city", bundle: ..., traitCollection: ...)`
    static func city(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.city, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clubs", bundle: ..., traitCollection: ...)`
    static func clubs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clubs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coinDaimondIcon", bundle: ..., traitCollection: ...)`
    static func coinDaimondIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coinDaimondIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diamondImage", bundle: ..., traitCollection: ...)`
    static func diamondImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamondImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emojiIcon", bundle: ..., traitCollection: ...)`
    static func emojiIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emojiIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fill_line", bundle: ..., traitCollection: ...)`
    static func fill_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fill_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fireIcon", bundle: ..., traitCollection: ...)`
    static func fireIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fireIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "languageDummy", bundle: ..., traitCollection: ...)`
    static func languageDummy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.languageDummy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light-bolt", bundle: ..., traitCollection: ...)`
    static func lightBolt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightBolt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "medal", bundle: ..., traitCollection: ...)`
    static func medal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic", bundle: ..., traitCollection: ...)`
    static func mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play-button", bundle: ..., traitCollection: ...)`
    static func playButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusIcon", bundle: ..., traitCollection: ...)`
    static func plusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "review", bundle: ..., traitCollection: ...)`
    static func review(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.review, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewardImage", bundle: ..., traitCollection: ...)`
    static func rewardImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewardImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareIcon", bundle: ..., traitCollection: ...)`
    static func shareIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tokenImagae", bundle: ..., traitCollection: ...)`
    static func tokenImagae(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenImagae, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Auth"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 22 nibs.
  struct nib {
    /// Nib `CreateClubTVC`.
    static let createClubTVC = _R.nib._CreateClubTVC()
    /// Nib `DailyGoalsTVC`.
    static let dailyGoalsTVC = _R.nib._DailyGoalsTVC()
    /// Nib `FindClubCVC`.
    static let findClubCVC = _R.nib._FindClubCVC()
    /// Nib `HomeCVC`.
    static let homeCVC = _R.nib._HomeCVC()
    /// Nib `HomeTVC`.
    static let homeTVC = _R.nib._HomeTVC()
    /// Nib `HomeTVHeaderCell`.
    static let homeTVHeaderCell = _R.nib._HomeTVHeaderCell()
    /// Nib `JoinedClubsTVC`.
    static let joinedClubsTVC = _R.nib._JoinedClubsTVC()
    /// Nib `LanguageSelectionCVC`.
    static let languageSelectionCVC = _R.nib._LanguageSelectionCVC()
    /// Nib `MySideFileTVC`.
    static let mySideFileTVC = _R.nib._MySideFileTVC()
    /// Nib `MySideImageTVC`.
    static let mySideImageTVC = _R.nib._MySideImageTVC()
    /// Nib `MySideTextTVC`.
    static let mySideTextTVC = _R.nib._MySideTextTVC()
    /// Nib `QuestionOptionWithoutImageTVC`.
    static let questionOptionWithoutImageTVC = _R.nib._QuestionOptionWithoutImageTVC()
    /// Nib `SelectCityCVC`.
    static let selectCityCVC = _R.nib._SelectCityCVC()
    /// Nib `SendImageTVC`.
    static let sendImageTVC = _R.nib._SendImageTVC()
    /// Nib `SenderFileTVC`.
    static let senderFileTVC = _R.nib._SenderFileTVC()
    /// Nib `SenderTextTVC`.
    static let senderTextTVC = _R.nib._SenderTextTVC()
    /// Nib `SettingsTVC`.
    static let settingsTVC = _R.nib._SettingsTVC()
    /// Nib `ShopCVC`.
    static let shopCVC = _R.nib._ShopCVC()
    /// Nib `SideMenuTVC`.
    static let sideMenuTVC = _R.nib._SideMenuTVC()
    /// Nib `TestProgress1CVC`.
    static let testProgress1CVC = _R.nib._TestProgress1CVC()
    /// Nib `UserScoreBoardTVC`.
    static let userScoreBoardTVC = _R.nib._UserScoreBoardTVC()
    /// Nib `UserWithProgressTVC`.
    static let userWithProgressTVC = _R.nib._UserWithProgressTVC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateClubTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createClubTVC) instead")
    static func createClubTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createClubTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DailyGoalsTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyGoalsTVC) instead")
    static func dailyGoalsTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyGoalsTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FindClubCVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.findClubCVC) instead")
    static func findClubCVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.findClubCVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCVC) instead")
    static func homeCVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTVC) instead")
    static func homeTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTVHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTVHeaderCell) instead")
    static func homeTVHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTVHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JoinedClubsTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.joinedClubsTVC) instead")
    static func joinedClubsTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.joinedClubsTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageSelectionCVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageSelectionCVC) instead")
    static func languageSelectionCVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageSelectionCVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MySideFileTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySideFileTVC) instead")
    static func mySideFileTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySideFileTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MySideImageTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySideImageTVC) instead")
    static func mySideImageTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySideImageTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MySideTextTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySideTextTVC) instead")
    static func mySideTextTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySideTextTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionOptionWithoutImageTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionOptionWithoutImageTVC) instead")
    static func questionOptionWithoutImageTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionOptionWithoutImageTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectCityCVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectCityCVC) instead")
    static func selectCityCVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCityCVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendImageTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendImageTVC) instead")
    static func sendImageTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendImageTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SenderFileTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.senderFileTVC) instead")
    static func senderFileTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.senderFileTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SenderTextTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.senderTextTVC) instead")
    static func senderTextTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.senderTextTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsTVC) instead")
    static func settingsTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShopCVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shopCVC) instead")
    static func shopCVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopCVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideMenuTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuTVC) instead")
    static func sideMenuTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TestProgress1CVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.testProgress1CVC) instead")
    static func testProgress1CVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.testProgress1CVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserScoreBoardTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userScoreBoardTVC) instead")
    static func userScoreBoardTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userScoreBoardTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserWithProgressTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userWithProgressTVC) instead")
    static func userWithProgressTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userWithProgressTVC)
    }
    #endif

    static func createClubTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateClubTVC? {
      return R.nib.createClubTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateClubTVC
    }

    static func dailyGoalsTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyGoalsTVC? {
      return R.nib.dailyGoalsTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyGoalsTVC
    }

    static func findClubCVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindClubCVC? {
      return R.nib.findClubCVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindClubCVC
    }

    static func homeCVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCVC? {
      return R.nib.homeCVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCVC
    }

    static func homeTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTVC? {
      return R.nib.homeTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTVC
    }

    static func homeTVHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTVHeaderCell? {
      return R.nib.homeTVHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTVHeaderCell
    }

    static func joinedClubsTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JoinedClubsTVC? {
      return R.nib.joinedClubsTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JoinedClubsTVC
    }

    static func languageSelectionCVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageSelectionCVC? {
      return R.nib.languageSelectionCVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageSelectionCVC
    }

    static func mySideFileTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideFileTVC? {
      return R.nib.mySideFileTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideFileTVC
    }

    static func mySideImageTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideImageTVC? {
      return R.nib.mySideImageTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideImageTVC
    }

    static func mySideTextTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideTextTVC? {
      return R.nib.mySideTextTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideTextTVC
    }

    static func questionOptionWithoutImageTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionOptionWithoutImageTVC? {
      return R.nib.questionOptionWithoutImageTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionOptionWithoutImageTVC
    }

    static func selectCityCVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCityCVC? {
      return R.nib.selectCityCVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCityCVC
    }

    static func sendImageTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SendImageTVC? {
      return R.nib.sendImageTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SendImageTVC
    }

    static func senderFileTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderFileTVC? {
      return R.nib.senderFileTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderFileTVC
    }

    static func senderTextTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderTextTVC? {
      return R.nib.senderTextTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderTextTVC
    }

    static func settingsTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTVC? {
      return R.nib.settingsTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTVC
    }

    static func shopCVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShopCVC? {
      return R.nib.shopCVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopCVC
    }

    static func sideMenuTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuTVC? {
      return R.nib.sideMenuTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuTVC
    }

    static func testProgress1CVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TestProgress1CVC? {
      return R.nib.testProgress1CVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TestProgress1CVC
    }

    static func userScoreBoardTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserScoreBoardTVC? {
      return R.nib.userScoreBoardTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserScoreBoardTVC
    }

    static func userWithProgressTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserWithProgressTVC? {
      return R.nib.userWithProgressTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserWithProgressTVC
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 22 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CreateClubTVC`.
    static let createClubTVC: Rswift.ReuseIdentifier<CreateClubTVC> = Rswift.ReuseIdentifier(identifier: "CreateClubTVC")
    /// Reuse identifier `DailyGoalsTVC`.
    static let dailyGoalsTVC: Rswift.ReuseIdentifier<DailyGoalsTVC> = Rswift.ReuseIdentifier(identifier: "DailyGoalsTVC")
    /// Reuse identifier `FindClubCVC`.
    static let findClubCVC: Rswift.ReuseIdentifier<FindClubCVC> = Rswift.ReuseIdentifier(identifier: "FindClubCVC")
    /// Reuse identifier `HomeCVC`.
    static let homeCVC: Rswift.ReuseIdentifier<HomeCVC> = Rswift.ReuseIdentifier(identifier: "HomeCVC")
    /// Reuse identifier `HomeTVC`.
    static let homeTVC: Rswift.ReuseIdentifier<HomeTVC> = Rswift.ReuseIdentifier(identifier: "HomeTVC")
    /// Reuse identifier `HomeTVHeaderCell`.
    static let homeTVHeaderCell: Rswift.ReuseIdentifier<HomeTVHeaderCell> = Rswift.ReuseIdentifier(identifier: "HomeTVHeaderCell")
    /// Reuse identifier `JoinedClubsTVC`.
    static let joinedClubsTVC: Rswift.ReuseIdentifier<JoinedClubsTVC> = Rswift.ReuseIdentifier(identifier: "JoinedClubsTVC")
    /// Reuse identifier `LanguageSelectionCVC`.
    static let languageSelectionCVC: Rswift.ReuseIdentifier<LanguageSelectionCVC> = Rswift.ReuseIdentifier(identifier: "LanguageSelectionCVC")
    /// Reuse identifier `MySideFileTVC`.
    static let mySideFileTVC: Rswift.ReuseIdentifier<MySideFileTVC> = Rswift.ReuseIdentifier(identifier: "MySideFileTVC")
    /// Reuse identifier `MySideImageTVC`.
    static let mySideImageTVC: Rswift.ReuseIdentifier<MySideImageTVC> = Rswift.ReuseIdentifier(identifier: "MySideImageTVC")
    /// Reuse identifier `MySideTextTVC`.
    static let mySideTextTVC: Rswift.ReuseIdentifier<MySideTextTVC> = Rswift.ReuseIdentifier(identifier: "MySideTextTVC")
    /// Reuse identifier `QuestionOptionWithoutImageTVC`.
    static let questionOptionWithoutImageTVC: Rswift.ReuseIdentifier<QuestionOptionWithoutImageTVC> = Rswift.ReuseIdentifier(identifier: "QuestionOptionWithoutImageTVC")
    /// Reuse identifier `SelectCityCVC`.
    static let selectCityCVC: Rswift.ReuseIdentifier<SelectCityCVC> = Rswift.ReuseIdentifier(identifier: "SelectCityCVC")
    /// Reuse identifier `SendImageTVC`.
    static let sendImageTVC: Rswift.ReuseIdentifier<SendImageTVC> = Rswift.ReuseIdentifier(identifier: "SendImageTVC")
    /// Reuse identifier `SenderFileTVC`.
    static let senderFileTVC: Rswift.ReuseIdentifier<SenderFileTVC> = Rswift.ReuseIdentifier(identifier: "SenderFileTVC")
    /// Reuse identifier `SenderTextTVC`.
    static let senderTextTVC: Rswift.ReuseIdentifier<SenderTextTVC> = Rswift.ReuseIdentifier(identifier: "SenderTextTVC")
    /// Reuse identifier `SettingsTVC`.
    static let settingsTVC: Rswift.ReuseIdentifier<SettingsTVC> = Rswift.ReuseIdentifier(identifier: "SettingsTVC")
    /// Reuse identifier `ShopCVC`.
    static let shopCVC: Rswift.ReuseIdentifier<ShopCVC> = Rswift.ReuseIdentifier(identifier: "ShopCVC")
    /// Reuse identifier `SideMenuTVC`.
    static let sideMenuTVC: Rswift.ReuseIdentifier<SideMenuTVC> = Rswift.ReuseIdentifier(identifier: "SideMenuTVC")
    /// Reuse identifier `TestProgress1CVC`.
    static let testProgress1CVC: Rswift.ReuseIdentifier<TestProgress1CVC> = Rswift.ReuseIdentifier(identifier: "TestProgress1CVC")
    /// Reuse identifier `UserScoreBoardTVC`.
    static let userScoreBoardTVC: Rswift.ReuseIdentifier<UserScoreBoardTVC> = Rswift.ReuseIdentifier(identifier: "UserScoreBoardTVC")
    /// Reuse identifier `UserWithProgressTVC`.
    static let userWithProgressTVC: Rswift.ReuseIdentifier<UserWithProgressTVC> = Rswift.ReuseIdentifier(identifier: "UserWithProgressTVC")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CreateClubTVC.validate()
      try _FindClubCVC.validate()
      try _HomeCVC.validate()
      try _JoinedClubsTVC.validate()
      try _LanguageSelectionCVC.validate()
      try _MySideImageTVC.validate()
      try _SelectCityCVC.validate()
      try _SendImageTVC.validate()
      try _SenderFileTVC.validate()
      try _SenderTextTVC.validate()
      try _ShopCVC.validate()
      try _SideMenuTVC.validate()
      try _UserScoreBoardTVC.validate()
      try _UserWithProgressTVC.validate()
    }

    struct _CreateClubTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CreateClubTVC

      let bundle = R.hostingBundle
      let identifier = "CreateClubTVC"
      let name = "CreateClubTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateClubTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateClubTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'CreateClubTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'CreateClubTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DailyGoalsTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DailyGoalsTVC

      let bundle = R.hostingBundle
      let identifier = "DailyGoalsTVC"
      let name = "DailyGoalsTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyGoalsTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyGoalsTVC
      }

      fileprivate init() {}
    }

    struct _FindClubCVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FindClubCVC

      let bundle = R.hostingBundle
      let identifier = "FindClubCVC"
      let name = "FindClubCVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindClubCVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindClubCVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'FindClubCVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'FindClubCVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeCVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeCVC

      let bundle = R.hostingBundle
      let identifier = "HomeCVC"
      let name = "HomeCVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in nib 'HomeCVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "medal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'medal' is used in nib 'HomeCVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'HomeCVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeTVC

      let bundle = R.hostingBundle
      let identifier = "HomeTVC"
      let name = "HomeTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTVC
      }

      fileprivate init() {}
    }

    struct _HomeTVHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeTVHeaderCell

      let bundle = R.hostingBundle
      let identifier = "HomeTVHeaderCell"
      let name = "HomeTVHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTVHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTVHeaderCell
      }

      fileprivate init() {}
    }

    struct _JoinedClubsTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JoinedClubsTVC

      let bundle = R.hostingBundle
      let identifier = "JoinedClubsTVC"
      let name = "JoinedClubsTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JoinedClubsTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JoinedClubsTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'JoinedClubsTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LanguageSelectionCVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LanguageSelectionCVC

      let bundle = R.hostingBundle
      let identifier = "LanguageSelectionCVC"
      let name = "LanguageSelectionCVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageSelectionCVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageSelectionCVC
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'LanguageSelectionCVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MySideFileTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MySideFileTVC

      let bundle = R.hostingBundle
      let identifier = "MySideFileTVC"
      let name = "MySideFileTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideFileTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideFileTVC
      }

      fileprivate init() {}
    }

    struct _MySideImageTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MySideImageTVC

      let bundle = R.hostingBundle
      let identifier = "MySideImageTVC"
      let name = "MySideImageTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideImageTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideImageTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "play-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-button' is used in nib 'MySideImageTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in nib 'MySideImageTVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'MySideImageTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MySideTextTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MySideTextTVC

      let bundle = R.hostingBundle
      let identifier = "MySideTextTVC"
      let name = "MySideTextTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySideTextTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySideTextTVC
      }

      fileprivate init() {}
    }

    struct _QuestionOptionWithoutImageTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QuestionOptionWithoutImageTVC

      let bundle = R.hostingBundle
      let identifier = "QuestionOptionWithoutImageTVC"
      let name = "QuestionOptionWithoutImageTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionOptionWithoutImageTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionOptionWithoutImageTVC
      }

      fileprivate init() {}
    }

    struct _SelectCityCVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectCityCVC

      let bundle = R.hostingBundle
      let identifier = "SelectCityCVC"
      let name = "SelectCityCVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCityCVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCityCVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'SelectCityCVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SendImageTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SendImageTVC

      let bundle = R.hostingBundle
      let identifier = "SendImageTVC"
      let name = "SendImageTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SendImageTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SendImageTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'SendImageTVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-button' is used in nib 'SendImageTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in nib 'SendImageTVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'SendImageTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SenderFileTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SenderFileTVC

      let bundle = R.hostingBundle
      let identifier = "SenderFileTVC"
      let name = "SenderFileTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderFileTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderFileTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'SenderFileTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in nib 'SenderFileTVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'SenderFileTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SenderTextTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SenderTextTVC

      let bundle = R.hostingBundle
      let identifier = "SenderTextTVC"
      let name = "SenderTextTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderTextTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderTextTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'SenderTextTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in nib 'SenderTextTVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'SenderTextTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SettingsTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTVC

      let bundle = R.hostingBundle
      let identifier = "SettingsTVC"
      let name = "SettingsTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTVC
      }

      fileprivate init() {}
    }

    struct _ShopCVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShopCVC

      let bundle = R.hostingBundle
      let identifier = "ShopCVC"
      let name = "ShopCVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShopCVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopCVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "coinDaimondIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'coinDaimondIcon' is used in nib 'ShopCVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "diamondImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diamondImage' is used in nib 'ShopCVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'ShopCVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SideMenuTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SideMenuTVC

      let bundle = R.hostingBundle
      let identifier = "SideMenuTVC"
      let name = "SideMenuTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'SideMenuTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TestProgress1CVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TestProgress1CVC

      let bundle = R.hostingBundle
      let identifier = "TestProgress1CVC"
      let name = "TestProgress1CVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TestProgress1CVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TestProgress1CVC
      }

      fileprivate init() {}
    }

    struct _UserScoreBoardTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserScoreBoardTVC

      let bundle = R.hostingBundle
      let identifier = "UserScoreBoardTVC"
      let name = "UserScoreBoardTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserScoreBoardTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserScoreBoardTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'UserScoreBoardTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "PinkishColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PinkishColor' is used in nib 'UserScoreBoardTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _UserWithProgressTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserWithProgressTVC

      let bundle = R.hostingBundle
      let identifier = "UserWithProgressTVC"
      let name = "UserWithProgressTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserWithProgressTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserWithProgressTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in nib 'UserWithProgressTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in nib 'UserWithProgressTVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in nib 'UserWithProgressTVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try fromClubs.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try fromShop.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try fromSideMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try initialTests.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try playGame.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let getStartedViewController = StoryboardViewControllerResource<GetStartedViewController>(identifier: "GetStartedViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Auth"
      let signViewController = StoryboardViewControllerResource<SignViewController>(identifier: "SignViewController")

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      func getStartedViewController(_: Void = ()) -> GetStartedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: getStartedViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func signViewController(_: Void = ()) -> SignViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Globe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Globe' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LaunchImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImage' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "apple-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'apple-logo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plusIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plusIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
        if _R.storyboard.auth().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Auth' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.auth().getStartedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'getStartedViewController' could not be loaded from storyboard 'Auth' as 'GetStartedViewController'.") }
        if _R.storyboard.auth().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Auth' as 'LoginViewController'.") }
        if _R.storyboard.auth().signViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signViewController' could not be loaded from storyboard 'Auth' as 'SignViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct fromClubs: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let createClubVC = StoryboardViewControllerResource<CreateClubVC>(identifier: "CreateClubVC")
      let findAClubVC = StoryboardViewControllerResource<FindAClubVC>(identifier: "FindAClubVC")
      let joinedClubsVC = StoryboardViewControllerResource<JoinedClubsVC>(identifier: "JoinedClubsVC")
      let joiningCodePopupVC = StoryboardViewControllerResource<JoiningCodePopupVC>(identifier: "JoiningCodePopupVC")
      let name = "FromClubs"
      let showImageViewController = StoryboardViewControllerResource<ShowImageViewController>(identifier: "ShowImageViewController")
      let webViewViewController = StoryboardViewControllerResource<WebViewViewController>(identifier: "WebViewViewController")

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func createClubVC(_: Void = ()) -> CreateClubVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createClubVC)
      }

      func findAClubVC(_: Void = ()) -> FindAClubVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findAClubVC)
      }

      func joinedClubsVC(_: Void = ()) -> JoinedClubsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: joinedClubsVC)
      }

      func joiningCodePopupVC(_: Void = ()) -> JoiningCodePopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: joiningCodePopupVC)
      }

      func showImageViewController(_: Void = ()) -> ShowImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showImageViewController)
      }

      func webViewViewController(_: Void = ()) -> WebViewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "attachmentIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachmentIcon' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'camera.fill' is used in storyboard 'FromClubs', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emojiIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emojiIcon' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'more' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'FromClubs', but couldn't be loaded.") }
        }
        if _R.storyboard.fromClubs().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'FromClubs' as 'ChatVC'.") }
        if _R.storyboard.fromClubs().createClubVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createClubVC' could not be loaded from storyboard 'FromClubs' as 'CreateClubVC'.") }
        if _R.storyboard.fromClubs().findAClubVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findAClubVC' could not be loaded from storyboard 'FromClubs' as 'FindAClubVC'.") }
        if _R.storyboard.fromClubs().joinedClubsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'joinedClubsVC' could not be loaded from storyboard 'FromClubs' as 'JoinedClubsVC'.") }
        if _R.storyboard.fromClubs().joiningCodePopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'joiningCodePopupVC' could not be loaded from storyboard 'FromClubs' as 'JoiningCodePopupVC'.") }
        if _R.storyboard.fromClubs().showImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showImageViewController' could not be loaded from storyboard 'FromClubs' as 'ShowImageViewController'.") }
        if _R.storyboard.fromClubs().webViewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewViewController' could not be loaded from storyboard 'FromClubs' as 'WebViewViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct fromShop: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FromShop"
      let payVC = StoryboardViewControllerResource<PayVC>(identifier: "PayVC")
      let shopVC = StoryboardViewControllerResource<ShopVC>(identifier: "ShopVC")
      let totalDailektToakensVC = StoryboardViewControllerResource<TotalDailektToakensVC>(identifier: "TotalDailektToakensVC")

      func payVC(_: Void = ()) -> PayVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payVC)
      }

      func shopVC(_: Void = ()) -> ShopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopVC)
      }

      func totalDailektToakensVC(_: Void = ()) -> TotalDailektToakensVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: totalDailektToakensVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'FromShop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tokenImagae", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tokenImagae' is used in storyboard 'FromShop', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'FromShop', but couldn't be loaded.") }
        }
        if _R.storyboard.fromShop().payVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payVC' could not be loaded from storyboard 'FromShop' as 'PayVC'.") }
        if _R.storyboard.fromShop().shopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopVC' could not be loaded from storyboard 'FromShop' as 'ShopVC'.") }
        if _R.storyboard.fromShop().totalDailektToakensVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'totalDailektToakensVC' could not be loaded from storyboard 'FromShop' as 'TotalDailektToakensVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct fromSideMenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dailyGoalParameterVC = StoryboardViewControllerResource<DailyGoalParameterVC>(identifier: "DailyGoalParameterVC")
      let dailyGoalsViewController = StoryboardViewControllerResource<DailyGoalsViewController>(identifier: "DailyGoalsViewController")
      let chatBotViewController = StoryboardViewControllerResource<ChatViewController>(identifier: "ChatViewController")
      let newChatBotVC = StoryboardViewControllerResource<ChatBotViewController>(identifier: "ChatBotViewController")
      let dialektTokenVCFromSideMenu = StoryboardViewControllerResource<DialektTokenVCFromSideMenu>(identifier: "DialektTokenVCFromSideMenu")
      let name = "FromSideMenu"
      let streakVC = StoryboardViewControllerResource<StreakVC>(identifier: "StreakVC")

      func dailyGoalParameterVC(_: Void = ()) -> DailyGoalParameterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyGoalParameterVC)
      }

      func dailyGoalsViewController(_: Void = ()) -> DailyGoalsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyGoalsViewController)
      }
        
        func chatBotViewController(_: Void = ()) -> ChatViewController? {
          return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatBotViewController)
        }
        
        func newchatBotVC(_: Void = ()) -> ChatBotViewController? {
          return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newChatBotVC)
        }

      func dialektTokenVCFromSideMenu(_: Void = ()) -> DialektTokenVCFromSideMenu? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dialektTokenVCFromSideMenu)
      }

      func streakVC(_: Void = ()) -> StreakVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: streakVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'FromSideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fireIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fireIcon' is used in storyboard 'FromSideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shareIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shareIcon' is used in storyboard 'FromSideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tokenImagae", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tokenImagae' is used in storyboard 'FromSideMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'FromSideMenu', but couldn't be loaded.") }
        }
        if _R.storyboard.fromSideMenu().dailyGoalParameterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyGoalParameterVC' could not be loaded from storyboard 'FromSideMenu' as 'DailyGoalParameterVC'.") }
        if _R.storyboard.fromSideMenu().dailyGoalsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyGoalsViewController' could not be loaded from storyboard 'FromSideMenu' as 'DailyGoalsViewController'.") }
        if _R.storyboard.fromSideMenu().dialektTokenVCFromSideMenu() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dialektTokenVCFromSideMenu' could not be loaded from storyboard 'FromSideMenu' as 'DialektTokenVCFromSideMenu'.") }
        if _R.storyboard.fromSideMenu().streakVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'streakVC' could not be loaded from storyboard 'FromSideMenu' as 'StreakVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let clubsViewController = StoryboardViewControllerResource<ClubsViewController>(identifier: "ClubsViewController")
      let homeLevelsViewController = StoryboardViewControllerResource<HomeLevelsViewController>(identifier: "HomeLevelsViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let shopViewController = StoryboardViewControllerResource<ShopViewController>(identifier: "ShopViewController")
   
      func clubsViewController(_: Void = ()) -> ClubsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clubsViewController)
      }

      func homeLevelsViewController(_: Void = ()) -> HomeLevelsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeLevelsViewController)
      }
       

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func shopViewController(_: Void = ()) -> ShopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clubs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clubs' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "diamondImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diamondImage' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tokenImagae", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tokenImagae' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().clubsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clubsViewController' could not be loaded from storyboard 'Home' as 'ClubsViewController'.") }
        if _R.storyboard.home().homeLevelsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeLevelsViewController' could not be loaded from storyboard 'Home' as 'HomeLevelsViewController'.") }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
        if _R.storyboard.home().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Home' as 'SettingsViewController'.") }
        if _R.storyboard.home().shopViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopViewController' could not be loaded from storyboard 'Home' as 'ShopViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct initialTests: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InitialTests"
      let quizType4VC = StoryboardViewControllerResource<QuizType4VC>(identifier: "QuizType4VC")
      let quizVC = StoryboardViewControllerResource<QuizVC>(identifier: "QuizVC")
      let selectCityViewController = StoryboardViewControllerResource<SelectCityViewController>(identifier: "SelectCityViewController")
      let selectDialectLevelViewController = StoryboardViewControllerResource<SelectDialectLevelViewController>(identifier: "SelectDialectLevelViewController")
      let selectDialectViewController = StoryboardViewControllerResource<SelectDialectViewController>(identifier: "SelectDialectViewController")
      let takeInitialTestVC = StoryboardViewControllerResource<TakeInitialTestVC>(identifier: "TakeInitialTestVC")
      let testPerformanceVC = StoryboardViewControllerResource<TestPerformanceVC>(identifier: "TestPerformanceVC")
      let testProgressContainer1VC = StoryboardViewControllerResource<TestProgressContainer1VC>(identifier: "TestProgressContainer1VC")
      let testProgressContainer2VC = StoryboardViewControllerResource<TestProgressContainer2VC>(identifier: "TestProgressContainer2VC")
      let testProgressContainer3VC = StoryboardViewControllerResource<TestProgressContainer3VC>(identifier: "TestProgressContainer3VC")
      let testProgressContainer4VC = StoryboardViewControllerResource<TestProgressContainer4VC>(identifier: "TestProgressContainer4VC")
      let testProgressContainer5 = StoryboardViewControllerResource<TestProgressContainer5>(identifier: "TestProgressContainer5")
      let testProgressVC = StoryboardViewControllerResource<TestProgressVC>(identifier: "TestProgressVC")

      func quizType4VC(_: Void = ()) -> QuizType4VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: quizType4VC)
      }

      func quizVC(_: Void = ()) -> QuizVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: quizVC)
      }

      func selectCityViewController(_: Void = ()) -> SelectCityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCityViewController)
      }

      func selectDialectLevelViewController(_: Void = ()) -> SelectDialectLevelViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectDialectLevelViewController)
      }

      func selectDialectViewController(_: Void = ()) -> SelectDialectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectDialectViewController)
      }

      func takeInitialTestVC(_: Void = ()) -> TakeInitialTestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: takeInitialTestVC)
      }

      func testPerformanceVC(_: Void = ()) -> TestPerformanceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testPerformanceVC)
      }

      func testProgressContainer1VC(_: Void = ()) -> TestProgressContainer1VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressContainer1VC)
      }

      func testProgressContainer2VC(_: Void = ()) -> TestProgressContainer2VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressContainer2VC)
      }

      func testProgressContainer3VC(_: Void = ()) -> TestProgressContainer3VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressContainer3VC)
      }

      func testProgressContainer4VC(_: Void = ()) -> TestProgressContainer4VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressContainer4VC)
      }

      func testProgressContainer5(_: Void = ()) -> TestProgressContainer5? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressContainer5)
      }

      func testProgressVC(_: Void = ()) -> TestProgressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testProgressVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "SoundIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SoundIcon' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if UIKit.UIImage(named: "languageDummy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'languageDummy' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mic' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'InitialTests', but couldn't be loaded.") }
        }
        if _R.storyboard.initialTests().quizType4VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'quizType4VC' could not be loaded from storyboard 'InitialTests' as 'QuizType4VC'.") }
        if _R.storyboard.initialTests().quizVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'quizVC' could not be loaded from storyboard 'InitialTests' as 'QuizVC'.") }
        if _R.storyboard.initialTests().selectCityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCityViewController' could not be loaded from storyboard 'InitialTests' as 'SelectCityViewController'.") }
        if _R.storyboard.initialTests().selectDialectLevelViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectDialectLevelViewController' could not be loaded from storyboard 'InitialTests' as 'SelectDialectLevelViewController'.") }
        if _R.storyboard.initialTests().selectDialectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectDialectViewController' could not be loaded from storyboard 'InitialTests' as 'SelectDialectViewController'.") }
        if _R.storyboard.initialTests().takeInitialTestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'takeInitialTestVC' could not be loaded from storyboard 'InitialTests' as 'TakeInitialTestVC'.") }
        if _R.storyboard.initialTests().testPerformanceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testPerformanceVC' could not be loaded from storyboard 'InitialTests' as 'TestPerformanceVC'.") }
        if _R.storyboard.initialTests().testProgressContainer1VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressContainer1VC' could not be loaded from storyboard 'InitialTests' as 'TestProgressContainer1VC'.") }
        if _R.storyboard.initialTests().testProgressContainer2VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressContainer2VC' could not be loaded from storyboard 'InitialTests' as 'TestProgressContainer2VC'.") }
        if _R.storyboard.initialTests().testProgressContainer3VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressContainer3VC' could not be loaded from storyboard 'InitialTests' as 'TestProgressContainer3VC'.") }
        if _R.storyboard.initialTests().testProgressContainer4VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressContainer4VC' could not be loaded from storyboard 'InitialTests' as 'TestProgressContainer4VC'.") }
        if _R.storyboard.initialTests().testProgressContainer5() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressContainer5' could not be loaded from storyboard 'InitialTests' as 'TestProgressContainer5'.") }
        if _R.storyboard.initialTests().testProgressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testProgressVC' could not be loaded from storyboard 'InitialTests' as 'TestProgressVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LaunchImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct playGame: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allUsersVC = StoryboardViewControllerResource<AllUsersVC>(identifier: "AllUsersVC")
      let bundle = R.hostingBundle
      let createOrJoinGroupVC = StoryboardViewControllerResource<CreateOrJoinGroupVC>(identifier: "CreateOrJoinGroupVC")
      let levelResultVC = StoryboardViewControllerResource<LevelResultVC>(identifier: "LevelResultVC")
      let name = "PlayGame"
      let playGameVC = StoryboardViewControllerResource<PlayGameVC>(identifier: "PlayGameVC")
      let scoreboardViewController = StoryboardViewControllerResource<ScoreboardViewController>(identifier: "ScoreboardViewController")
      let yourScoreVC = StoryboardViewControllerResource<YourScoreVC>(identifier: "YourScoreVC")

      func allUsersVC(_: Void = ()) -> AllUsersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allUsersVC)
      }

      func createOrJoinGroupVC(_: Void = ()) -> CreateOrJoinGroupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createOrJoinGroupVC)
      }

      func levelResultVC(_: Void = ()) -> LevelResultVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: levelResultVC)
      }

      func playGameVC(_: Void = ()) -> PlayGameVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playGameVC)
      }

      func scoreboardViewController(_: Void = ()) -> ScoreboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoreboardViewController)
      }

      func yourScoreVC(_: Void = ()) -> YourScoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: yourScoreVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "DummyUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DummyUser' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LaunchImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImage' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "light-bolt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'light-bolt' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rewardImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rewardImage' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightYellowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightYellowColor' is used in storyboard 'PlayGame', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'PlayGame', but couldn't be loaded.") }
          if UIKit.UIColor(named: "PinkishColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PinkishColor' is used in storyboard 'PlayGame', but couldn't be loaded.") }
        }
        if _R.storyboard.playGame().allUsersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allUsersVC' could not be loaded from storyboard 'PlayGame' as 'AllUsersVC'.") }
        if _R.storyboard.playGame().createOrJoinGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createOrJoinGroupVC' could not be loaded from storyboard 'PlayGame' as 'CreateOrJoinGroupVC'.") }
        if _R.storyboard.playGame().levelResultVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'levelResultVC' could not be loaded from storyboard 'PlayGame' as 'LevelResultVC'.") }
        if _R.storyboard.playGame().playGameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playGameVC' could not be loaded from storyboard 'PlayGame' as 'PlayGameVC'.") }
        if _R.storyboard.playGame().scoreboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoreboardViewController' could not be loaded from storyboard 'PlayGame' as 'ScoreboardViewController'.") }
        if _R.storyboard.playGame().yourScoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'yourScoreVC' could not be loaded from storyboard 'PlayGame' as 'YourScoreVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountViewController = StoryboardViewControllerResource<AccountViewController>(identifier: "AccountViewController")
      let bundle = R.hostingBundle
      let name = "Settings"
      let resetPasswordSuccessVC = StoryboardViewControllerResource<ResetPasswordSuccessVC>(identifier: "ResetPasswordSuccessVC")
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")

      func accountViewController(_: Void = ()) -> AccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountViewController)
      }

      func resetPasswordSuccessVC(_: Void = ()) -> ResetPasswordSuccessVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordSuccessVC)
      }

      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "PasswordSuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PasswordSuccess' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "city", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'city' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().accountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'Settings' as 'AccountViewController'.") }
        if _R.storyboard.settings().resetPasswordSuccessVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordSuccessVC' could not be loaded from storyboard 'Settings' as 'ResetPasswordSuccessVC'.") }
        if _R.storyboard.settings().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'Settings' as 'ResetPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
